{"version":3,"sources":["components/LazyImage.tsx","common/utils/observer.tsx","application/fossil/index.tsx"],"names":["LazyImage","loadingSource","source","className","style","observer","onClick","myRef","useRef","useEffect","observe","current","unobserve","src","data-src","ref","useObserver","IntersectionObserver","entries","forEach","item","intersectionRatio","target","url","dataset","setAttribute","Fossils","result","Object","values","json","map","index","key","name","price"],"mappings":"gHAAA,oBAsBeA,IApBf,YAOS,IANLC,EAMI,EANJA,cACAC,EAKI,EALJA,OACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,SACAC,EACI,EADJA,QAEMC,EAAQC,iBAAO,MAOrB,OANAC,qBAAU,WAEN,OADAJ,EAASK,QAAQH,EAAMI,SAChB,WACHN,EAASO,UAAUL,EAAMI,YAE9B,IAEC,yBAAKR,UAAWA,EAAWC,MAAOA,EAAOS,IAAKZ,EAAea,WAAUZ,EAAQa,IAAKR,EAAOD,QAASA,M,iCClBrG,SAASU,IACZ,IAAMX,EAAW,IAAIY,sBAAqB,SAACC,GACvCA,EAAQC,SAAQ,SAACC,GACb,KAAIA,EAAKC,mBAAqB,GAA9B,CACM,IACMC,EAAWF,EAAXE,OACFC,EAAOD,EAAeE,QAAQX,IACpCS,EAAOG,aAAa,MAAOF,GAC3BlB,EAASO,UAAUU,UAI/B,OAAOjB,EAZX,mC,ox4DCAA,sDA0BeqB,UArBf,WACI,IAAMrB,EAAWW,cACXW,EAASC,OAAOC,OAAOC,GAAMC,KAAI,SAACX,EAAMY,GAC1C,OACI,yBAAK7B,UAAU,OAAO8B,IAAKD,GACvB,6BACKZ,EAAKc,KAAK,YAEf,iCACMd,EAAKe,OAEX,kBAAC,IAAD,CAAWhC,UAAU,WAAWF,cAAc,gBAAgBC,OAAM,2BAAsBkB,EAAK,aAA3B,QAA+Cf,SAAUA,QAIzI,OACI,yBAAKF,UAAU,WACTwB","file":"static/js/7.86dff950.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\r\n\r\nfunction LazyImage({\r\n    loadingSource,\r\n    source,\r\n    className,\r\n    style,\r\n    observer,\r\n    onClick,\r\n}: any) {\r\n    const myRef = useRef(null)\r\n    useEffect(() => {\r\n        observer.observe(myRef.current)\r\n        return () => {\r\n            observer.unobserve(myRef.current)\r\n        }\r\n    }, [])\r\n    return (\r\n        <img className={className} style={style} src={loadingSource} data-src={source} ref={myRef} onClick={onClick}/>\r\n    )\r\n}\r\n\r\nexport default LazyImage","export function useObserver() {\r\n    const observer = new IntersectionObserver((entries) => {\r\n        entries.forEach((item: any) => {\r\n            if (item.intersectionRatio <= 0) return \r\n            else {\r\n                const { target } = item\r\n                const url = (target as any).dataset.src\r\n                target.setAttribute('src', url)\r\n                observer.unobserve(target)                \r\n            }\r\n        })\r\n    })\r\n    return observer\r\n}","import React from 'react'\r\nimport json from '../../common/json/fossils.json'\r\nimport LazyImage from '../../components/LazyImage'\r\nimport { useObserver } from '../../common/utils/observer'\r\n\r\nfunction Fossils() {\r\n    const observer = useObserver()\r\n    const result = Object.values(json).map((item, index) => {\r\n        return (\r\n            <div className=\"item\" key={index}>\r\n                <div>\r\n                    {item.name['name-cn']}\r\n                </div>\r\n                <div>\r\n                    ${item.price}\r\n                </div>\r\n                <LazyImage className=\"fish_img\" loadingSource='./loading.svg' source={`./images/fossils/${item['file-name']}.png`} observer={observer}></LazyImage>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div className=\"contain\">\r\n            { result }\r\n        </div>\r\n    )\r\n}\r\nexport default Fossils"],"sourceRoot":""}